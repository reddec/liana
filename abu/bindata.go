// Code generated by go-bindata.
// sources:
// templates/table.gotemplate
// DO NOT EDIT!

package abu

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTableGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x6e\xdb\x3c\x0c\xbe\xfb\x29\xf8\x0b\xc5\x7f\x9a\xe2\xe5\x36\x74\xb2\x07\x0c\x43\x81\x01\x45\x57\x0c\xed\x03\x28\x11\x13\x6b\x95\xe5\x40\x62\xd2\x16\x9a\xde\x7d\x90\x15\x27\x4e\xe3\x76\x3d\x2c\x87\xc4\x0c\xc9\x8f\xdf\x47\x52\xb2\x68\xa8\x35\x60\xa4\x5d\x57\x0c\x2d\xab\x0b\xd1\xa0\x54\x75\x01\x00\x20\x5a\x24\x09\xcb\x46\x3a\x8f\x54\xb1\xfb\xbb\x2b\xfe\x89\x95\x63\x9f\x95\x2d\x56\x6c\xa7\xf1\x71\xd3\x39\x62\xb0\xec\x2c\xa1\xa5\x8a\x3d\x6a\x45\x4d\xa5\x70\xa7\x97\xc8\x7b\xe3\x03\x68\xab\x49\x4b\xc3\xfd\x52\x1a\xac\xe6\x07\x24\xd2\x64\xb0\x0e\x61\x76\x2b\x9d\x6c\xfd\xec\x2e\xd9\x31\x8a\x32\x3b\x72\x90\xd1\xf6\x01\x1c\x9a\x8a\x79\x7a\x36\xe8\x1b\x44\x62\xd0\x38\x5c\x55\xec\x98\xfa\xb5\xeb\xc8\x93\x93\x9b\xfb\x9f\xd7\x31\xa6\x0a\xa2\xcc\x7a\xc4\xa2\x53\xcf\x75\x11\xc2\x05\x5a\x05\x97\x15\xb0\x10\xd0\xaa\x18\x59\x8c\x85\xf8\x8f\x73\xa0\x6e\x03\x9c\xd7\x85\x50\x7a\x07\x4b\x23\xbd\xaf\x58\xd2\x23\xb5\x45\xc7\xf6\x34\x16\x6e\x60\xdd\xcc\x87\x20\xc2\x27\xe2\x4b\xb4\x94\xc2\x26\x64\x34\xf3\xb3\x64\x92\x0b\x83\x87\xfc\xde\xe8\xbf\xb9\x27\xa7\x37\xa8\x20\x04\x0e\x7a\x05\x17\x03\xd8\x77\xc2\xf6\x5a\xdb\x87\x18\x73\x5c\xd3\xed\xd0\x0d\x0a\x32\x68\x06\x3e\x4e\x2f\xdb\xee\x68\xa4\x4f\x08\x4e\xda\x35\xc2\xc5\x4a\xa3\xe9\xfb\x90\x79\xfa\x18\x4f\xe2\xf6\x60\x75\x08\x39\xb2\x1f\x47\xf3\x12\xab\x2f\x7f\x2c\x56\x8e\xab\xa5\xf8\x17\x5c\xf2\x08\x8e\xe9\x8c\x43\x66\x33\xfb\x26\x49\x32\xf8\x0d\x6b\xda\x98\x31\xe2\x39\xfd\x21\x65\x24\xe0\x2a\x3d\x4d\x09\x78\xbd\x89\x67\xa1\xb9\x9a\xaa\x27\x1d\xbd\x53\x1e\x96\x6d\x02\x2f\xcd\x9d\x85\xc0\x62\x9c\x1d\x3b\xd6\xdb\x2c\x75\x4e\x4e\xe3\x8a\x72\xaa\x62\x62\x8d\xc6\xe3\x1b\x2c\xdf\x2c\xf6\x2a\xe6\xc9\xb0\xa6\xff\x3d\x1d\x61\x3e\x2c\xa7\xee\xe3\x0c\x45\xd9\xaf\x62\x3a\x62\x4a\xef\xea\xe2\xed\x83\x63\xe5\x6e\xb4\x0a\x5b\x33\x04\x6e\xe4\x5a\x5b\x49\xba\xb3\xf0\x6b\xeb\x49\xaf\x9e\xf9\xfe\x12\x39\x1c\xa9\x13\xce\xc2\xe8\x51\x2a\x72\x4d\xd8\xc2\xd0\x0f\xbd\x02\x83\x30\xfb\xb1\x5a\x79\x24\xf8\x38\xf4\x44\x69\x9f\x98\xaa\x41\x0f\x3b\x6f\x90\x90\x27\xa8\xe9\xb6\x19\x6e\x97\x2f\x5d\x0f\x57\x85\xc0\x66\xb7\x0e\x77\xc3\x9e\x42\x8c\xff\x1b\xdd\xea\xec\xb9\x4e\x4f\x23\x17\x9b\x1a\x1e\xc9\x85\xb6\x0a\x9f\x2a\xc6\xe7\xac\x4e\x60\xba\xdb\xfa\xb3\xfd\x10\xa5\xd1\xef\x53\x9d\x04\x13\xcc\x6e\xb6\x2d\x9c\x31\xf8\x77\xaa\x6f\xf0\x89\xde\xa9\xba\x4e\xb1\x7f\x11\x24\xca\xad\x19\x56\xa8\x5f\x8b\xc3\x02\xf5\x57\x7b\x76\x91\x82\x70\xc8\x78\xec\x9c\xe2\x0b\x87\xf2\xe1\x12\xfa\x1f\x2e\x8d\xf9\xdc\xbb\x63\x51\x14\xa2\xdc\x27\x8a\x32\xaf\xa7\x28\xd3\x5b\xad\xfe\x13\x00\x00\xff\xff\xb2\x15\xbf\x1f\xdc\x06\x00\x00")

func templatesTableGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTableGotemplate,
		"templates/table.gotemplate",
	)
}

func templatesTableGotemplate() (*asset, error) {
	bytes, err := templatesTableGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table.gotemplate", size: 1756, mode: os.FileMode(436), modTime: time.Unix(1545223522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/table.gotemplate": templatesTableGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"table.gotemplate": &bintree{templatesTableGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
