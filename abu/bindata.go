// Code generated by go-bindata.
// sources:
// templates/page.gotemplate
// templates/table.gotemplate
// DO NOT EDIT!

package abu

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesPageGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x66\xb9\x3e\x86\x16\xb2\xd8\x43\x36\xa0\x04\x6c\x5b\xe4\xd4\x02\x45\x9b\x7c\x00\x2d\x8e\x2c\x22\x34\xa5\x52\x63\xc5\x01\xcb\x7f\x2f\x48\x49\x91\xac\x18\xf1\xc1\x16\x4d\xce\x7b\x4f\x6f\x1e\x47\xd4\x74\x34\x60\xa4\x3d\xe4\x0c\x2d\x2b\x36\xa2\x46\xa9\x8a\x0d\x00\x80\xf7\x5b\xb4\x0a\xee\x73\x60\xde\xa3\x55\x21\xb0\x10\xd2\x8e\x38\x22\x49\x28\x6b\xe9\x3a\xa4\x9c\x3d\x3d\x3e\xf0\x3b\x96\x15\x8b\x3d\x2b\x8f\x98\xb3\x5e\xe3\x4b\xdb\x38\x62\x50\x36\x96\xd0\x52\xce\x5e\xb4\xa2\x3a\x57\xd8\xeb\x12\x79\x5a\xdc\x80\xb6\x9a\xb4\x34\xbc\x2b\xa5\xc1\xfc\x76\x42\xf2\x9e\xbd\x68\xaa\x61\xf7\x45\x92\x64\xf0\x1b\x0e\xd4\x9a\x49\x01\x69\x32\x58\x78\xbf\xfb\x2e\x9d\x3c\x76\xbb\xc7\xb8\x0e\x41\x64\xc3\xc6\x08\xc0\x61\x9b\x84\x0f\x35\x46\xdb\x67\x70\x68\x72\xd6\xd1\xab\xc1\xae\x46\x24\x06\xb5\xc3\x2a\x67\x33\xd2\xa7\xa6\xa1\x8e\x9c\x6c\x9f\x7e\x7c\x0d\x21\x8a\x11\xd9\x60\x8a\xd8\x37\xea\xb5\xd8\x88\xbf\x38\x07\x6a\x5a\xe0\xbc\xd8\x44\x0e\x5d\xc1\x76\xaa\xfe\x86\xf6\x34\xf1\x59\xd9\x43\x69\x64\xd7\xe5\xcc\xca\x7e\x2f\x1d\x0c\x3f\x1c\xcf\xad\xb4\x8a\x9b\x03\xec\x0f\x5c\x49\xf7\xcc\x06\xc1\xa9\x4a\xe9\x55\xd5\x78\x9c\x81\x56\xd3\x5f\x3f\x4f\x6d\xf4\x15\xd5\xe7\xc1\xd7\x45\x7d\xc2\x38\x99\x15\x44\x94\x72\x74\x5c\x9e\xa8\x59\x9d\x9d\x8c\x72\xd2\x1e\x10\xb6\xc9\xbe\x1b\xd8\x3a\xac\x62\xe7\xaf\xbd\xd7\xfa\x23\x8c\x5e\xb0\x71\x4d\x78\x04\xef\x75\x05\xf8\x6b\xae\xff\xbf\x24\xdd\x4f\xf8\x21\xc8\xb4\x9c\x62\xf5\x5e\xd1\x1b\xb6\x5c\x42\xc7\x06\x32\x48\xcd\xcb\x59\xd9\x98\xc6\xdd\xc3\xdf\xd5\x5d\xf5\x5f\x25\xe7\x3e\x46\xe9\x11\xd3\xfb\x89\x4c\x64\xf2\x3a\x83\xc8\x8c\xbe\xee\xc6\x9c\x9a\xf9\xec\xc9\x2c\xba\x94\x29\xdd\x8f\x81\xcf\xac\xec\x87\x20\x0c\x55\xcb\x0e\xc6\xdc\x4b\x6d\xd1\xb1\x39\x92\xba\x82\x55\x6a\x67\xd8\xbd\xcb\x66\x92\x8f\x2e\x40\x3a\x5d\xdf\x4e\x3c\x84\x67\xe2\x25\x5a\x8a\x4c\x57\x6e\x45\x7d\xbb\x84\xbd\xb8\x16\x97\xaf\x3b\x2b\xf8\xf8\xfa\xc9\xbd\xc1\x37\xf2\xb4\x48\xdf\xbc\x23\xa7\x5b\x54\xec\x92\x6e\x0c\x97\xb6\x0a\xcf\x37\xb0\xad\x34\x9a\x34\x58\x06\x81\xdd\xda\x6a\x72\x13\xb4\xe2\x95\xc1\xf3\x95\x80\x08\xaa\x67\x8f\x0d\x3f\x2a\xfe\x2f\xc4\x07\x73\xe0\xff\xa4\xde\x27\x8e\x34\x10\xea\x6b\xd5\xaa\xf0\x9e\x79\xcf\x42\xd8\x79\x9f\x74\xc1\x76\xf7\x10\x6b\xba\x51\x67\x08\x69\x9b\x25\x0c\xb5\xba\x60\x19\xb9\xcb\x37\x5c\x38\x98\x25\x27\xde\x8d\xa0\x31\x32\x22\xc5\xb7\xd8\x6c\x44\x36\x3e\x89\x6c\x9c\x2b\x59\x1c\xc6\xc5\x9f\x00\x00\x00\xff\xff\x23\x3d\x90\x9b\x93\x05\x00\x00")

func templatesPageGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesPageGotemplate,
		"templates/page.gotemplate",
	)
}

func templatesPageGotemplate() (*asset, error) {
	bytes, err := templatesPageGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/page.gotemplate", size: 1427, mode: os.FileMode(436), modTime: time.Unix(1545299403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTableGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xe1\x92\xd3\x36\x10\xfe\x9f\xa7\xd8\xaa\x19\x06\x66\x50\x9c\xa3\xa5\xa5\x57\x3b\x9d\xd2\x0e\x33\x74\x80\x42\x39\x1e\x40\x8e\xd6\xb1\x7a\xb2\x64\x64\x39\x90\x31\x7e\x8a\xfe\xed\xd3\xf5\x49\x3a\x92\xec\xd8\x49\x9c\x0b\xfc\xc0\x3f\xce\x67\x5b\xfb\xed\xb7\x9f\x56\xbb\x9b\x38\xb7\x85\x04\xc9\xd4\x26\x21\xa8\xc8\x6a\x16\xe7\xc8\xf8\x6a\x06\x00\x10\x17\x68\x19\xac\x73\x66\x2a\xb4\x09\x79\x77\xf3\x8c\x3e\x21\xd1\xf8\x9b\x62\x05\x26\x64\x2b\xf0\x43\xa9\x8d\x25\xb0\xd6\xca\xa2\xb2\x09\xf9\x20\xb8\xcd\x13\x8e\x5b\xb1\x46\xea\x1f\x1e\x82\x50\xc2\x0a\x26\x69\xb5\x66\x12\x93\xab\x3d\x92\x15\x56\xe2\xaa\x69\x16\xaf\x99\x61\x45\xb5\xb8\x71\xcf\x6d\x1b\x47\xe1\x43\x58\x24\x85\xba\x05\x83\x32\x21\x95\xdd\x49\xac\x72\x44\x4b\x20\x37\x98\x25\x64\x30\x7d\xaa\xb5\xad\xac\x61\xe5\xbb\xbf\x5e\xb4\xad\xf3\x10\x47\x21\x9e\x38\xd5\x7c\xb7\x9a\x35\xcd\x1c\x15\x87\xeb\x04\x48\xd3\xa0\xe2\x6d\x4b\xda\x76\x16\x7f\x43\x29\x58\x5d\x02\xa5\x6e\x09\x05\x91\xc1\xbc\xc7\x7c\x89\xaa\x6e\xdb\xc0\x42\xb1\x2d\xac\x25\xab\xaa\x84\x28\xb6\x4d\x99\x81\x70\xa3\xf8\xb1\x64\x8a\x53\xb9\x81\x74\x43\x39\x33\xb7\x24\xf0\xf6\x56\x5c\x1c\x59\x75\xcb\x09\x08\xde\xbf\x7a\x5b\x97\x4e\x42\xe4\xbf\x05\x09\x47\xf6\x1e\xa3\x96\x47\x10\x8e\x4a\x61\x28\xab\xad\x3e\x5a\xeb\x2e\x17\x84\x61\x6a\x83\x30\xf7\x2a\x3e\x84\xb9\xc1\xcc\xc5\x3d\x15\xd7\xf1\x15\x4b\x31\xf2\x46\x85\xc5\x02\x9a\x46\x64\x80\xef\x07\xfb\x5f\xd7\x56\x6c\x7b\xfc\xb6\x65\xfe\xb1\x17\xf5\x94\xd1\x1e\x9b\x8d\xa1\xdd\xb6\x12\xf0\x5b\x9a\x90\xb5\x96\xda\x5c\xc3\xb7\xd9\x93\xec\xa7\x8c\x0d\xbb\xeb\xa8\x3b\xcc\xa6\xe9\x9d\xc5\x11\x9b\xf6\x10\x47\x52\x4c\xab\xe1\x79\x1d\x6a\x1a\xd5\x72\xb4\x4b\x11\x17\xdb\x2e\xd9\x22\xc5\xb6\x21\x11\x82\xd5\x78\x07\x5d\x8a\x33\xa1\xd0\x74\x31\x76\xe9\x72\x94\xbc\x03\x6c\x6a\xa2\x91\x93\xfc\xaa\xc7\xb1\xf8\xd1\xd2\x35\x2a\xeb\x90\x26\x92\x3f\xbf\x1a\xf0\x07\xee\x47\xde\xde\xd4\x68\x76\xe7\xbd\x65\xda\x14\x50\xa0\xcd\x35\x4f\xc8\x06\x4f\x92\x6a\x14\x96\x50\x65\x6d\xe9\xc6\xe8\xba\x84\x22\xa5\xdf\x4d\xec\x60\xec\xd7\x80\xdd\x95\x98\x90\x5c\x70\x8e\x8a\x74\x15\x40\x67\x59\xe5\xce\xe3\x96\xc9\x1a\xdd\x96\x91\xc5\x9f\xdd\xab\x4f\xb0\xb1\xa5\x0c\x87\xf1\x0b\x10\xa5\x28\xc4\x21\xe0\x8b\xf0\xe6\xb3\xf1\x9c\xc0\x3d\xda\x7b\xa7\x13\xe9\x63\x75\xb2\x50\xb7\x8f\x46\x4b\x02\xa5\x64\x6b\xcc\xb5\xe4\x68\xc6\xa5\xa4\x93\x96\x9c\x4b\xe4\x11\xb3\x37\x01\x7d\xcf\x6c\x82\xd8\xb4\xd2\x94\x95\x25\x2a\x7e\xe6\xb4\xc4\x69\x6d\xad\x56\xbd\x5d\x6a\x15\xa4\x56\x51\x5d\x5b\x29\x14\xd2\x0a\xd7\x5a\x71\xe6\x3c\x87\x80\xab\x3a\x75\x0a\xad\x2a\x64\x66\x9d\xc7\x51\x30\x9f\x20\x33\x64\xfa\x99\x57\x71\xe4\x24\x9a\xca\xbf\x21\xc1\x62\xcb\x52\x89\xfb\x6c\xf6\x0f\xfe\x2f\xad\xac\x11\x25\x72\x38\x2e\xa4\xcf\x2d\x16\x2f\x84\xba\x6d\xdb\xb0\x2e\xd7\x5b\x34\xa7\x05\x23\xb6\x43\x07\x0a\xcf\xe6\x90\x6c\xd3\x74\x95\x2d\x13\x28\x7d\x2d\x0f\xa7\xa6\x9a\xa8\x66\xb1\xcd\x5d\xd9\xf0\x2b\x7d\x4b\xc9\x8f\xb1\x0e\xeb\x42\x1c\x8d\xbd\xb9\xf5\x47\x5c\x42\x1b\x19\xcc\x49\x5f\x67\x17\xbf\x33\xcb\x86\x24\xb8\x8b\xfe\xbe\x34\x0b\xc5\xf1\xe3\xc3\x71\x20\xcf\xdc\x7f\x2e\x90\x89\x48\xf8\x74\x9a\x9c\x97\x79\x3a\xab\xd8\x50\x57\x4f\x4d\xee\x28\xdc\xd3\x45\xf4\x78\xc5\xdc\xe5\xa2\x0b\xc5\xc7\x06\xf3\xc5\xcd\xae\xc4\xaa\x0b\x15\xe8\x05\x6b\x91\x01\x53\x1c\xee\x2b\x6d\x03\xd2\xe2\x69\x2d\xa4\x7d\xae\x1e\xc0\x7d\x51\x39\xa8\xce\x01\xb1\xa2\x40\x02\xe4\xc6\xdd\x1e\xdc\x81\x1a\x90\xdd\x31\x6d\xdb\xc5\x90\x09\x8b\x67\xda\x14\xcc\x02\x79\x04\x7f\x30\x05\x8f\x96\xcb\x1f\xe0\xea\xf1\xf5\xf2\xfb\xeb\xe5\x63\xa0\xcb\x1f\x97\x4b\x78\xf9\xf6\x26\x98\x91\x0b\xa4\x51\x56\xd8\x33\x3f\x20\x0d\xf7\x5d\xbf\xf4\x6f\x5e\xb1\x02\x81\xa4\x5a\xcb\xcf\x63\x2b\x32\x38\x24\x7c\x91\x89\xbb\xfe\xfb\xf7\x9f\x4b\xd0\x8e\x2c\xf9\x74\x94\xa3\xd3\x6b\xe7\x97\x77\xdb\xa1\x7d\xb9\xf8\x9f\xa7\xea\x45\xe7\x5f\x92\xf4\xe7\xe6\x85\xf3\x9e\xe2\xe8\xf8\xc0\x9d\xae\x3d\xac\x16\x27\x8a\xc5\xd1\xa8\x5c\xc4\x91\xaf\x7a\x6e\x22\xf5\xb5\xf6\xce\xa1\x22\xf6\x03\xc8\x1e\x67\x18\xfe\x4a\xb6\x11\x8a\x59\xa1\x15\xfc\x5d\x57\x56\x64\x3b\xda\xcd\xdc\xfb\x59\xe2\xb0\xb0\x0f\x93\x5c\xc9\x36\xd8\x8f\x72\x61\x4b\x44\x06\x12\xa1\xeb\xd4\xb0\xec\xb7\x85\x8b\xca\x31\xe5\x7d\x3c\x53\xfd\x8c\x1d\xa0\xfa\x29\x6e\x4a\xdf\x50\x69\x7e\x09\xe3\x41\xe2\x7a\xe5\x6b\x83\xdb\xbe\x4a\x42\xdb\xde\xf3\x7d\x3e\x39\xe9\xef\xe0\xb2\xe4\x74\xd0\xb9\xe7\x1b\x79\x32\xd1\x74\xfb\x3e\x32\xc5\xc2\xb2\xd4\x97\x9f\x84\xd0\x2b\xb2\x72\x0c\x84\xae\xab\x93\x9c\x38\x9d\x1d\xcf\xa9\xe7\x84\xb3\xb0\x78\x55\x17\x70\x42\xfb\xab\xaa\xf7\xca\xcf\x34\x5f\x4f\xbd\x95\x73\x70\x41\x98\x61\x6c\xee\xe6\xe4\x7d\x42\xfb\x31\x3e\x7c\xb2\x1c\x9a\xbd\xc5\x07\x6d\x38\x4d\x0d\xb2\xdb\x6b\xf0\x37\xca\xa4\xfc\xd9\x7f\x6e\x67\xb3\x59\x1c\x75\x86\x71\x14\x8e\x4b\x1c\xb9\x1f\xa5\xab\xff\x03\x00\x00\xff\xff\xdc\x17\x27\xf9\x9b\x0e\x00\x00")

func templatesTableGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTableGotemplate,
		"templates/table.gotemplate",
	)
}

func templatesTableGotemplate() (*asset, error) {
	bytes, err := templatesTableGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table.gotemplate", size: 3739, mode: os.FileMode(436), modTime: time.Unix(1545308303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/page.gotemplate":  templatesPageGotemplate,
	"templates/table.gotemplate": templatesTableGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"page.gotemplate":  &bintree{templatesPageGotemplate, map[string]*bintree{}},
		"table.gotemplate": &bintree{templatesTableGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
