// Code generated by go-bindata.
// sources:
// templates/page.gotemplate
// templates/table.gotemplate
// DO NOT EDIT!

package abu

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesPageGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x66\xb9\x3e\x86\x16\xb2\xd8\x43\x36\xa0\x04\x6c\x5b\xe4\xd4\x02\x45\x9b\x7c\x00\x2d\x8e\x2c\x22\x34\xa5\x52\x63\xc5\x01\xcb\x7f\x2f\x48\x49\x91\xac\x18\xf1\xc1\x16\x4d\xce\x7b\x4f\x6f\x1e\x47\xd4\x74\x34\x60\xa4\x3d\xe4\x0c\x2d\x2b\x36\xa2\x46\xa9\x8a\x0d\x00\x80\xf7\x5b\xb4\x0a\xee\x73\x60\xde\xa3\x55\x21\xb0\x10\xd2\x8e\x38\x22\x49\x28\x6b\xe9\x3a\xa4\x9c\x3d\x3d\x3e\xf0\x3b\x96\x15\x8b\x3d\x2b\x8f\x98\xb3\x5e\xe3\x4b\xdb\x38\x62\x50\x36\x96\xd0\x52\xce\x5e\xb4\xa2\x3a\x57\xd8\xeb\x12\x79\x5a\xdc\x80\xb6\x9a\xb4\x34\xbc\x2b\xa5\xc1\xfc\x76\x42\xf2\x9e\xbd\x68\xaa\x61\xf7\x45\x92\x64\xf0\x1b\x0e\xd4\x9a\x49\x01\x69\x32\x58\x78\xbf\xfb\x2e\x9d\x3c\x76\xbb\xc7\xb8\x0e\x41\x64\xc3\xc6\x08\xc0\x61\x9b\x84\x0f\x35\x46\xdb\x67\x70\x68\x72\xd6\xd1\xab\xc1\xae\x46\x24\x06\xb5\xc3\x2a\x67\x33\xd2\xa7\xa6\xa1\x8e\x9c\x6c\x9f\x7e\x7c\x0d\x21\x8a\x11\xd9\x60\x8a\xd8\x37\xea\xb5\xd8\x88\xbf\x38\x07\x6a\x5a\xe0\xbc\xd8\x44\x0e\x5d\xc1\x76\xaa\xfe\x86\xf6\x34\xf1\x59\xd9\x43\x69\x64\xd7\xe5\xcc\xca\x7e\x2f\x1d\x0c\x3f\x1c\xcf\xad\xb4\x8a\x9b\x03\xec\x0f\x5c\x49\xf7\xcc\x06\xc1\xa9\x4a\xe9\x55\xd5\x78\x9c\x81\x56\xd3\x5f\x3f\x4f\x6d\xf4\x15\xd5\xe7\xc1\xd7\x45\x7d\xc2\x38\x99\x15\x44\x94\x72\x74\x5c\x9e\xa8\x59\x9d\x9d\x8c\x72\xd2\x1e\x10\xb6\xc9\xbe\x1b\xd8\x3a\xac\x62\xe7\xaf\xbd\xd7\xfa\x23\x8c\x5e\xb0\x71\x4d\x78\x04\xef\x75\x05\xf8\x6b\xae\xff\xbf\x24\xdd\x4f\xf8\x21\xc8\xb4\x9c\x62\xf5\x5e\xd1\x1b\xb6\x5c\x42\xc7\x06\x32\x48\xcd\xcb\x59\xd9\x98\xc6\xdd\xc3\xdf\xd5\x5d\xf5\x5f\x25\xe7\x3e\x46\xe9\x11\xd3\xfb\x89\x4c\x64\xf2\x3a\x83\xc8\x8c\xbe\xee\xc6\x9c\x9a\xf9\xec\xc9\x2c\xba\x94\x29\xdd\x8f\x81\xcf\xac\xec\x87\x20\x0c\x55\xcb\x0e\xc6\xdc\x4b\x6d\xd1\xb1\x39\x92\xba\x82\x55\x6a\x67\xd8\xbd\xcb\x66\x92\x8f\x2e\x40\x3a\x5d\xdf\x4e\x3c\x84\x67\xe2\x25\x5a\x8a\x4c\x57\x6e\x45\x7d\xbb\x84\xbd\xb8\x16\x97\xaf\x3b\x2b\xf8\xf8\xfa\xc9\xbd\xc1\x37\xf2\xb4\x48\xdf\xbc\x23\xa7\x5b\x54\xec\x92\x6e\x0c\x97\xb6\x0a\xcf\x37\xb0\xad\x34\x9a\x34\x58\x06\x81\xdd\xda\x6a\x72\x13\xb4\xe2\x95\xc1\xf3\x95\x80\x08\xaa\x67\x8f\x0d\x3f\x2a\xfe\x2f\xc4\x07\x73\xe0\xff\xa4\xde\x27\x8e\x34\x10\xea\x6b\xd5\xaa\xf0\x9e\x79\xcf\x42\xd8\x79\x9f\x74\xc1\x76\xf7\x10\x6b\xba\x51\x67\x08\x69\x9b\x25\x0c\xb5\xba\x60\x19\xb9\xcb\x37\x5c\x38\x98\x25\x27\xde\x8d\xa0\x31\x32\x22\xc5\xb7\xd8\x6c\x44\x36\x3e\x89\x6c\x9c\x2b\x59\x1c\xc6\xc5\x9f\x00\x00\x00\xff\xff\x23\x3d\x90\x9b\x93\x05\x00\x00")

func templatesPageGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesPageGotemplate,
		"templates/page.gotemplate",
	)
}

func templatesPageGotemplate() (*asset, error) {
	bytes, err := templatesPageGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/page.gotemplate", size: 1427, mode: os.FileMode(436), modTime: time.Unix(1545299403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTableGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x51\x8e\xdb\x36\x13\x7e\xf7\x29\xe6\xe7\x6f\x04\x09\x10\x5a\xbb\x69\x53\xa4\x5b\xca\x45\xd3\x22\x40\x8a\x24\x4d\x9a\xcd\x01\x68\x73\x64\xb1\x4b\x91\x0a\x45\x39\x59\x28\x3a\x45\x5f\x7b\xba\x9e\xa4\x20\x29\x59\xb2\x2d\xaf\xb3\x0f\xd1\xc3\x6a\x25\x71\xbe\xf9\xe6\xe3\x70\x66\xcc\x72\x57\x28\x50\x5c\x6f\x52\x82\x9a\x2c\x67\x2c\x47\x2e\x96\x33\x00\x00\x56\xa0\xe3\xb0\xce\xb9\xad\xd0\xa5\xe4\xc3\xf5\x0b\xfa\x8c\x24\xe3\x6f\x9a\x17\x98\x92\xad\xc4\x4f\xa5\xb1\x8e\xc0\xda\x68\x87\xda\xa5\xe4\x93\x14\x2e\x4f\x05\x6e\xe5\x1a\x69\x78\x78\x0c\x52\x4b\x27\xb9\xa2\xd5\x9a\x2b\x4c\x2f\x77\x48\x4e\x3a\x85\xcb\xa6\x59\xbc\xe5\x96\x17\xd5\xe2\xda\x3f\xb7\x2d\x4b\xe2\x87\xb8\x48\x49\x7d\x03\x16\x55\x4a\x2a\x77\xab\xb0\xca\x11\x1d\x81\xdc\x62\x96\x92\xc1\xf4\xb9\x31\xae\x72\x96\x97\x1f\xfe\x7c\xd5\xb6\xde\x03\x4b\x62\x3c\x6c\x65\xc4\xed\x72\xd6\x34\x73\xd4\x02\xae\x52\x20\x4d\x83\x5a\xb4\x2d\x69\xdb\x19\xfb\x1f\xa5\xe0\x4c\x09\x94\xfa\x25\x14\x64\x06\xf3\x1e\xf3\x35\xea\xba\x6d\x23\x0b\xcd\xb7\xb0\x56\xbc\xaa\x52\xa2\xf9\x76\xc5\x2d\xc4\x1b\xc5\xcf\x25\xd7\x82\xaa\x0d\xac\x36\x54\x70\x7b\x43\x22\xef\x60\x25\xe4\x81\x55\xb7\x9c\x80\x14\xfd\xab\xf7\x75\xe9\x25\x44\xf1\x6b\x94\x70\x64\x1f\x30\x6a\x75\x00\xe1\xa9\x14\x96\xf2\xda\x99\x83\xb5\xfe\xf2\x41\x58\xae\x37\x08\xf3\xa0\xe2\x63\x98\x5b\xcc\x7c\xdc\x53\x71\x1d\x5e\x4c\xc9\x91\x37\x2a\x1d\x16\xd0\x34\x32\x03\xfc\x38\xd8\xff\xb2\x76\x72\xdb\xe3\xb7\x2d\x0f\x8f\xbd\xa8\xc7\x8c\x76\xd8\x7c\x0c\xed\xb7\x95\x40\xd8\xd2\x94\xac\x8d\x32\xf6\x0a\xfe\x9f\x3d\xcb\x7e\xcc\xf8\xb0\xbb\x9e\xba\xc7\x6c\x9a\xde\x19\x4b\xf8\xb4\x07\x96\x28\x39\xad\x46\xe0\xb5\xaf\x69\x52\xab\xd1\x2e\x25\x42\x6e\xbb\x64\x4b\x34\xdf\xc6\x44\x88\x56\xe3\x1d\xf4\x29\xce\xa5\x46\xdb\xc5\xd8\xa5\xcb\x41\xf2\x0e\xb0\x2b\x9b\x8c\x9c\xe4\x97\x3d\x8e\xc3\xcf\x8e\xae\x51\x3b\x8f\x34\x91\xfc\xf9\xe5\x80\x3f\x70\x3f\xf0\xf6\xae\x46\x7b\x7b\xda\x5b\x66\x6c\x01\x05\xba\xdc\x88\x94\x6c\xf0\x28\xa9\x46\x61\x49\x5d\xd6\x8e\x6e\xac\xa9\x4b\x28\x56\xf4\xbb\x89\x1d\x64\x61\x0d\xb8\xdb\x12\x53\x92\x4b\x21\x50\x93\xae\x02\x98\x2c\xab\xfc\x79\xdc\x72\x55\xa3\xdf\x32\xb2\xf8\xa3\x7b\xf5\x05\x36\xae\x54\xf1\x30\xde\x03\x51\xc9\x42\xee\x03\xbe\x8a\x6f\xbe\x1a\xcf\x0b\xdc\xa3\x7d\xf4\x3a\x91\x3e\x56\x2f\x0b\xf5\xfb\x68\x8d\x22\x50\x2a\xbe\xc6\xdc\x28\x81\x76\x5c\x4a\x3a\x69\xc9\xa9\x44\x1e\x31\x7b\x17\xd1\x77\xcc\x26\x88\x4d\x2b\x4d\x79\x59\xa2\x16\x27\x4e\x0b\x5b\xd5\xce\x19\xdd\xdb\xad\x9c\x86\x95\xd3\xd4\xd4\x4e\x49\x8d\xb4\xc2\xb5\xd1\x82\x7b\xcf\x31\xe0\xaa\x5e\x79\x85\x96\x15\x72\xbb\xce\x59\x12\xcd\x27\xc8\x0c\x99\x7e\xe2\x15\x4b\xbc\x44\x53\xf9\x37\x24\x18\x73\x7c\xa5\x70\x97\xcd\xe1\x21\xfc\xa5\x95\xb3\xb2\x44\x01\x87\x85\xf4\xa5\xc3\xe2\x95\xd4\x37\x6d\x1b\xd7\xe5\x66\x8b\xf6\xb8\x60\x30\x37\x74\xa0\xf8\x6c\xf7\xc9\x36\x4d\x57\xd9\x32\x89\x2a\xd4\xf2\x78\x6a\xaa\x89\x6a\xc6\x5c\xee\xcb\x46\x58\x19\x5a\x4a\x7e\x88\xb5\x5f\x17\x58\x32\xf6\xe6\xd7\x1f\x70\x89\x6d\x64\x30\x27\x7d\x9d\x5d\xfc\xc6\x1d\x1f\x92\xe0\x2e\xfa\xbb\xd2\x2c\xb5\xc0\xcf\x8f\xc7\x81\xbc\xf0\xff\xf9\x40\x26\x22\x11\xd3\x69\x72\x5a\xe6\xe9\xac\xe2\x43\x5d\x3d\x36\xb9\xa3\x70\x4f\x17\xd1\xc3\x15\x73\x9f\x8b\x3e\x94\x10\x1b\xcc\x17\xd7\xb7\x25\x56\x5d\xa8\x40\xcf\x58\xcb\x0c\xb8\x16\xf0\x50\x1b\x17\x91\x16\xcf\x6b\xa9\xdc\x4b\xfd\x08\x1e\xca\xca\x43\x75\x0e\x88\x93\x05\x12\x20\xd7\xfe\xf6\xe8\x0e\xd4\x88\xec\x8f\x69\xdb\x2e\x86\x4c\x58\xbc\x30\xb6\xe0\x0e\xc8\x13\xf8\x9d\x6b\x78\x72\x71\xf1\x03\x5c\x3e\xbd\xba\xf8\xfe\xea\xe2\x29\xbc\x7e\x7f\x1d\x0d\xc8\x19\xba\xa8\x2a\xec\x39\xef\xd1\x85\x87\xbe\x53\x86\x37\x6f\x78\x81\x40\x56\xc6\xa8\xaf\xe3\x29\x33\xd8\xa7\x7a\x96\x89\xbf\xfe\xfd\xe7\xef\x73\xd0\x9e\x2c\xf9\x72\x90\x9d\xd3\x6b\xe7\xe7\xf7\xd9\xa3\xdd\x5f\xf6\xaf\x53\xf5\xac\xf3\xfb\xa4\xfb\xa9\x49\xe1\xb4\x27\x96\x1c\x1e\xb5\xe3\xb5\xfb\x75\xe2\x48\x31\x96\x8c\x0a\x05\x4b\x42\xbd\xf3\xb3\x68\xa8\xb2\x77\x8e\x13\x2c\x8c\x1e\x3b\x9c\x61\xec\x2b\xf9\x46\x6a\xee\xa4\xd1\xf0\x57\x5d\x39\x99\xdd\xd2\x6e\xda\xde\x4d\x11\xfb\x25\x7d\x98\xe1\x4a\xbe\xc1\x7e\x88\x8b\x5b\x22\x33\x50\x08\x5d\x8f\x86\x8b\x7e\x5b\x84\xac\x3c\x53\xd1\xc7\x33\xd5\xc9\xf8\x1e\x6a\x98\xdf\xa6\xf4\x8d\x35\xe6\xe7\x38\x18\xa4\xbe\x4b\xbe\xb5\xb8\xed\xeb\x23\xb4\xed\x83\xd0\xe1\xd3\xa3\xce\x0e\x3e\x4b\x8e\x47\x9c\x07\xa1\x85\xa7\x13\xed\xb6\xef\x20\x53\x2c\x1c\x5f\x85\xc2\x93\x12\x7a\x49\x96\x9e\x81\x34\x75\x75\x94\x13\xc7\x53\xe3\x29\xf5\xbc\x70\x0e\x16\x6f\xea\x02\x8e\x68\x7f\x53\xf5\xde\x84\x69\xe6\xdb\xa9\xb7\xf4\x0e\xce\x08\x33\x0c\xcc\xdd\x84\xbc\x4b\xe8\x30\xc0\xc7\x4f\x4e\x40\xb3\xb3\xf8\x64\xac\xa0\x2b\x8b\xfc\xe6\x0a\xc2\x8d\x72\xa5\x7e\x0a\x9f\xdb\xd9\x6c\xc6\x92\xce\x90\x25\xf1\xb8\xb0\xc4\xff\x1c\x5d\xfe\x17\x00\x00\xff\xff\x92\xd1\xcd\x94\x95\x0e\x00\x00")

func templatesTableGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTableGotemplate,
		"templates/table.gotemplate",
	)
}

func templatesTableGotemplate() (*asset, error) {
	bytes, err := templatesTableGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table.gotemplate", size: 3733, mode: os.FileMode(436), modTime: time.Unix(1545308549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/page.gotemplate":  templatesPageGotemplate,
	"templates/table.gotemplate": templatesTableGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"page.gotemplate":  &bintree{templatesPageGotemplate, map[string]*bintree{}},
		"table.gotemplate": &bintree{templatesTableGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
