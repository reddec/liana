// Code generated by go-bindata.
// sources:
// templates/page.gotemplate
// templates/table.gotemplate
// DO NOT EDIT!

package abu

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesPageGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x66\xb9\x3e\x86\x16\xb2\xd8\x43\x36\xa0\x04\x6c\x5b\xe4\xd4\x02\x45\x9b\x7c\x00\x2d\x8e\x2c\x22\x34\xa5\x52\x63\xc5\x01\xcb\x7f\x2f\x48\x49\x91\xac\x18\xf1\xc1\x16\x4d\xce\x7b\x4f\x6f\x1e\x47\xd4\x74\x34\x60\xa4\x3d\xe4\x0c\x2d\x2b\x36\xa2\x46\xa9\x8a\x0d\x00\x80\xf7\x5b\xb4\x0a\xee\x73\x60\xde\xa3\x55\x21\xb0\x10\xd2\x8e\x38\x22\x49\x28\x6b\xe9\x3a\xa4\x9c\x3d\x3d\x3e\xf0\x3b\x96\x15\x8b\x3d\x2b\x8f\x98\xb3\x5e\xe3\x4b\xdb\x38\x62\x50\x36\x96\xd0\x52\xce\x5e\xb4\xa2\x3a\x57\xd8\xeb\x12\x79\x5a\xdc\x80\xb6\x9a\xb4\x34\xbc\x2b\xa5\xc1\xfc\x76\x42\xf2\x9e\xbd\x68\xaa\x61\xf7\x45\x92\x64\xf0\x1b\x0e\xd4\x9a\x49\x01\x69\x32\x58\x78\xbf\xfb\x2e\x9d\x3c\x76\xbb\xc7\xb8\x0e\x41\x64\xc3\xc6\x08\xc0\x61\x9b\x84\x0f\x35\x46\xdb\x67\x70\x68\x72\xd6\xd1\xab\xc1\xae\x46\x24\x06\xb5\xc3\x2a\x67\x33\xd2\xa7\xa6\xa1\x8e\x9c\x6c\x9f\x7e\x7c\x0d\x21\x8a\x11\xd9\x60\x8a\xd8\x37\xea\xb5\xd8\x88\xbf\x38\x07\x6a\x5a\xe0\xbc\xd8\x44\x0e\x5d\xc1\x76\xaa\xfe\x86\xf6\x34\xf1\x59\xd9\x43\x69\x64\xd7\xe5\xcc\xca\x7e\x2f\x1d\x0c\x3f\x1c\xcf\xad\xb4\x8a\x9b\x03\xec\x0f\x5c\x49\xf7\xcc\x06\xc1\xa9\x4a\xe9\x55\xd5\x78\x9c\x81\x56\xd3\x5f\x3f\x4f\x6d\xf4\x15\xd5\xe7\xc1\xd7\x45\x7d\xc2\x38\x99\x15\x44\x94\x72\x74\x5c\x9e\xa8\x59\x9d\x9d\x8c\x72\xd2\x1e\x10\xb6\xc9\xbe\x1b\xd8\x3a\xac\x62\xe7\xaf\xbd\xd7\xfa\x23\x8c\x5e\xb0\x71\x4d\x78\x04\xef\x75\x05\xf8\x6b\xae\xff\xbf\x24\xdd\x4f\xf8\x21\xc8\xb4\x9c\x62\xf5\x5e\xd1\x1b\xb6\x5c\x42\xc7\x06\x32\x48\xcd\xcb\x59\xd9\x98\xc6\xdd\xc3\xdf\xd5\x5d\xf5\x5f\x25\xe7\x3e\x46\xe9\x11\xd3\xfb\x89\x4c\x64\xf2\x3a\x83\xc8\x8c\xbe\xee\xc6\x9c\x9a\xf9\xec\xc9\x2c\xba\x94\x29\xdd\x8f\x81\xcf\xac\xec\x87\x20\x0c\x55\xcb\x0e\xc6\xdc\x4b\x6d\xd1\xb1\x39\x92\xba\x82\x55\x6a\x67\xd8\xbd\xcb\x66\x92\x8f\x2e\x40\x3a\x5d\xdf\x4e\x3c\x84\x67\xe2\x25\x5a\x8a\x4c\x57\x6e\x45\x7d\xbb\x84\xbd\xb8\x16\x97\xaf\x3b\x2b\xf8\xf8\xfa\xc9\xbd\xc1\x37\xf2\xb4\x48\xdf\xbc\x23\xa7\x5b\x54\xec\x92\x6e\x0c\x97\xb6\x0a\xcf\x37\xb0\xad\x34\x9a\x34\x58\x06\x81\xdd\xda\x6a\x72\x13\xb4\xe2\x95\xc1\xf3\x95\x80\x08\xaa\x67\x8f\x0d\x3f\x2a\xfe\x2f\xc4\x07\x73\xe0\xff\xa4\xde\x27\x8e\x34\x10\xea\x6b\xd5\xaa\xf0\x9e\x79\xcf\x42\xd8\x79\x9f\x74\xc1\x76\xf7\x10\x6b\xba\x51\x67\x08\x69\x9b\x25\x0c\xb5\xba\x60\x19\xb9\xcb\x37\x5c\x38\x98\x25\x27\xde\x8d\xa0\x31\x32\x22\xc5\xb7\xd8\x6c\x44\x36\x3e\x89\x6c\x9c\x2b\x59\x1c\xc6\xc5\x9f\x00\x00\x00\xff\xff\x23\x3d\x90\x9b\x93\x05\x00\x00")

func templatesPageGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesPageGotemplate,
		"templates/page.gotemplate",
	)
}

func templatesPageGotemplate() (*asset, error) {
	bytes, err := templatesPageGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/page.gotemplate", size: 1427, mode: os.FileMode(436), modTime: time.Unix(1545299403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTableGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\xa6\xec\x22\xa7\xd0\xea\xa2\x97\x74\x4b\xb9\xe8\x0f\x02\x14\xd8\xa6\x49\x9b\x3c\x00\x25\x8e\x2c\x76\x29\x52\xa1\x28\xef\x1a\xaa\xde\xbd\x20\x29\x59\xb2\x25\xbb\xed\x21\x3e\xac\x97\x12\xe7\x9b\x99\x6f\x86\xdf\xd0\xac\x74\x95\x02\xc5\xf5\x3e\x25\xa8\xc9\x6e\xc3\x4a\xe4\x62\xb7\x01\x00\x60\x15\x3a\x0e\x79\xc9\x6d\x83\x2e\x25\x9f\x3e\xbe\xa5\x6f\x48\x32\x7f\xa7\x79\x85\x29\x39\x48\x7c\xae\x8d\x75\x04\x72\xa3\x1d\x6a\x97\x92\x67\x29\x5c\x99\x0a\x3c\xc8\x1c\x69\x58\xbc\x06\xa9\xa5\x93\x5c\xd1\x26\xe7\x0a\xd3\xfb\x13\x92\x93\x4e\xe1\xae\xeb\xb6\xef\xb9\xe5\x55\xb3\xfd\xe8\xd7\x7d\xcf\x92\xf8\x22\x6e\x52\x52\x3f\x81\x45\x95\x92\xc6\x1d\x15\x36\x25\xa2\x23\x50\x5a\x2c\x52\x32\x99\xfe\x64\x8c\x6b\x9c\xe5\xf5\xa7\x3f\x1e\xfb\xde\x7b\x60\x49\xcc\x87\x65\x46\x1c\x77\x9b\xae\xbb\x43\x2d\xe0\x21\x05\xd2\x75\xa8\x45\xdf\x93\xbe\xdf\xb0\xaf\x28\x05\x67\x6a\xa0\xd4\x6f\xa1\x20\x0b\xb8\x1b\x31\x7f\x43\xdd\xf6\x7d\x8c\x42\xf3\x03\xe4\x8a\x37\x4d\x4a\x34\x3f\x64\xdc\x42\xfc\xa2\xf8\x52\x73\x2d\xa8\xda\x43\xb6\xa7\x82\xdb\x27\x12\xe3\x0e\x56\x42\x5e\x58\x0d\xdb\x09\x48\x31\x3e\xfa\xb3\xad\x3d\x85\x28\x7e\x8e\x14\xce\xec\x03\x46\xab\x2e\x20\x7c\x28\x95\xa5\xbc\x75\xe6\x62\xaf\xff\xf8\x24\x2c\xd7\x7b\x84\xbb\xc0\xe2\x6b\xb8\xb3\x58\xf8\xbc\xd7\xf2\xba\xfc\x30\x25\x67\xde\xa8\x74\x58\x41\xd7\xc9\x02\xf0\xf3\x64\xff\x63\xee\xe4\x61\xc4\xef\x7b\x1e\x96\x23\xa9\xcb\x88\x4e\xd8\x7c\x0e\xed\xcb\x4a\x20\x94\x34\x25\xb9\x51\xc6\x3e\xc0\xd7\xc5\x9b\xe2\xbb\x82\x4f\xd5\xf5\xa1\x7b\xcc\xae\x1b\x9d\xb1\x84\xaf\x7b\x60\x89\x92\xeb\x6c\x84\xb8\xce\x39\x4d\x5a\x35\xab\x52\x22\xe4\x61\x68\xb6\x44\xf3\x43\x6c\x84\x68\x35\xaf\xa0\x6f\x71\x2e\x35\xda\x21\xc7\xa1\x5d\x2e\x9a\x77\x82\xcd\x6c\x32\x73\x52\xde\x8f\x38\x0e\x5f\x1c\xcd\x51\x3b\x8f\xb4\xd2\xfc\xe5\xfd\x84\x3f\xc5\x7e\xe1\xed\x43\x8b\xf6\x78\xdd\x5b\x61\x6c\x05\x15\xba\xd2\x88\x94\xec\x71\xd1\x54\xb3\xb4\xa4\xae\x5b\x47\xf7\xd6\xb4\x35\x54\x19\xfd\x76\xa5\x82\x2c\xec\x01\x77\xac\x31\x25\xa5\x14\x02\x35\x19\x14\xc0\x14\x45\xe3\xcf\xe3\x81\xab\x16\x7d\xc9\xc8\xf6\xf7\xe1\xd1\xdf\xb0\x77\xb5\x8a\x87\xf1\x7f\x20\x2a\x59\xc9\x73\xc0\xc7\xf8\xe4\x3f\xe3\x79\x82\x47\xb4\xcf\x9e\x27\x32\xe6\xea\x69\xa1\xbe\x8e\xd6\x28\x02\xb5\xe2\x39\x96\x46\x09\xb4\x73\x29\x19\xa8\x25\xd7\x1a\x79\x16\xd9\x87\x88\x7e\x8a\x6c\x25\xb0\x75\xa6\x29\xaf\x6b\xd4\xe2\xca\x69\x61\x59\xeb\x9c\xd1\xa3\x5d\xe6\x34\x64\x4e\x53\xd3\x3a\x25\x35\xd2\x06\x73\xa3\x05\xf7\x9e\x63\xc2\x4d\x9b\x79\x86\x76\x0d\x72\x9b\x97\x2c\x89\xe6\x2b\xc1\x4c\x9d\x7e\xe5\x11\x4b\x3c\x45\x6b\xfd\x37\x35\x18\x73\x3c\x53\x78\xea\xe6\xb0\x08\x7f\x69\xe3\xac\xac\x51\xc0\xa5\x90\xfe\xea\xb0\x7a\x94\xfa\xa9\xef\xe3\xbe\xd2\x1c\xd0\x2e\x05\x83\xb9\x69\x02\xc5\xb5\x3d\x0f\xb6\xeb\x06\x65\x2b\x24\xaa\xa0\xe5\xf1\xd4\x34\x2b\x6a\xc6\x5c\xe9\x65\x23\xec\x0c\x23\xa5\xbc\xc4\x3a\xd7\x05\x96\xcc\xbd\xf9\xfd\x17\xb1\xc4\x31\x32\x99\x93\x51\x67\xb7\xbf\x70\xc7\xa7\x26\xb8\x15\xfe\x49\x9a\xa7\x04\xde\xfa\xff\xd6\x12\xb8\x4e\xe2\x7a\xcf\x38\x71\x53\x7a\x4f\x92\xba\xc4\xf3\x2a\xe4\xdb\xb9\xef\xb7\x13\x63\x61\x4d\x6e\x0a\xee\x9a\xc7\xd0\x34\xaa\xc1\x1b\x51\xde\x74\x76\x15\x73\x21\xe2\xcb\xa7\xe7\x25\x8c\x03\xff\xfc\xf5\x54\x43\x96\x84\x56\xf4\xd7\x84\x70\x00\x6e\x2a\x3d\x0b\x53\xe1\x84\x33\x4d\xe4\x9a\xef\xa5\xe6\x4e\x1a\x0d\x7f\xb5\x8d\x93\xc5\x91\x0e\x17\xa1\x93\xc0\x9f\x9f\xb6\x69\xbc\xd6\x7c\x8f\xe3\x7c\x8d\x7c\xc8\x02\x14\xc2\x20\x9f\xf0\xcd\xc8\x89\x90\x8d\x8f\x54\x8c\xf9\xac\x89\x0c\x3f\x43\x0d\xa3\x75\x8d\xfe\xd8\x03\x3f\x44\xcd\x4e\xbd\x80\xbd\xb7\x78\x18\x5b\x17\xfa\xfe\x55\x10\xdf\x74\x21\xba\xe0\x4b\xb4\x9c\x3e\xaf\x82\xba\xa6\x2b\x4a\x38\x1e\xee\xb5\x28\x1c\xcf\xa4\x16\xf8\x92\x12\x7a\x4f\x76\x3e\x02\x69\xda\x66\xd1\x67\xcb\x81\x7e\x8d\x3d\x4f\x9c\x83\xed\xbb\xb6\x82\x45\xd8\x5f\x94\xbd\x77\x61\xd0\x7c\x39\xf6\x76\xde\xc1\xbf\x10\x33\xdd\x65\x86\xcb\xcb\xa9\xa1\xc3\xdd\x2a\xbe\x72\x02\xba\x93\xc5\xb3\xb1\x82\x66\x16\xf9\xd3\x03\x84\x2f\xca\x95\xfa\x3e\xbc\xee\x37\x9b\x0d\x4b\x06\x43\x96\xc4\xe3\xc2\x12\xff\x4b\x61\xf7\x4f\x00\x00\x00\xff\xff\x77\x7a\x69\x3d\x30\x0c\x00\x00")

func templatesTableGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTableGotemplate,
		"templates/table.gotemplate",
	)
}

func templatesTableGotemplate() (*asset, error) {
	bytes, err := templatesTableGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table.gotemplate", size: 3120, mode: os.FileMode(436), modTime: time.Unix(1545305448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/page.gotemplate":  templatesPageGotemplate,
	"templates/table.gotemplate": templatesTableGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"page.gotemplate":  &bintree{templatesPageGotemplate, map[string]*bintree{}},
		"table.gotemplate": &bintree{templatesTableGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
