// Code generated by go-bindata.
// sources:
// templates/table.gotemplate
// DO NOT EDIT!

package abu

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTableGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdb\x6e\xe3\x36\x13\xbe\xf7\x53\xcc\xcf\x3f\xe8\xd5\xd2\x6a\xee\xb6\x29\xe5\xa2\x07\x2c\x50\x20\xdd\x2e\xda\xdd\x07\xa0\xcd\x91\xc5\x86\xa2\x54\x6a\xac\x24\x50\xf9\xee\x05\x49\xeb\x60\x4b\x71\x7b\x51\x5d\x58\xa2\x66\xe6\x9b\xd3\x37\x23\x8b\x92\x2a\x03\x46\xda\x63\xce\xd0\xb2\xdd\x46\x94\x28\xd5\x6e\x03\x00\x20\x2a\x24\x09\x87\x52\xba\x16\x29\x67\x5f\x3e\x7f\xe0\xef\x59\x36\x97\x59\x59\x61\xce\x3a\x8d\xcf\x4d\xed\x88\xc1\xa1\xb6\x84\x96\x72\xf6\xac\x15\x95\xb9\xc2\x4e\x1f\x90\xc7\xc3\x3b\xd0\x56\x93\x96\x86\xb7\x07\x69\x30\xbf\x1f\x91\x48\x93\xc1\x5d\xdf\x6f\x3f\x49\x27\xab\x76\xfb\x39\x9c\xbd\x17\x59\x12\x24\x25\xa3\xed\x13\x38\x34\x39\x6b\xe9\xd5\x60\x5b\x22\x12\x83\xd2\x61\x91\xb3\xc9\xf4\x87\xba\xa6\x96\x9c\x6c\xbe\xfc\xf6\xe8\x7d\xf0\x20\xb2\x94\x8f\xd8\xd7\xea\x75\xb7\xe9\xfb\x3b\xb4\x0a\x1e\x72\x60\x7d\x8f\x56\x79\xcf\xbc\xdf\x88\xff\x71\x0e\x54\x37\xc0\x79\x50\xe1\xa0\x0b\xb8\x1b\x30\x7f\x41\x7b\xf2\x3e\x45\x61\x65\x07\x07\x23\xdb\x36\x67\x56\x76\x7b\xe9\x20\xdd\x38\xbe\x34\xd2\x2a\x6e\x8e\xb0\x3f\x72\x25\xdd\x13\x4b\x71\x47\x2b\xa5\xaf\xac\xce\xea\x0c\xb4\x1a\x5e\xfd\x7e\x6a\x42\x09\x51\xfd\x98\x4a\x38\xb3\x8f\x18\x27\x73\x05\x11\x42\xa9\x1c\x97\x27\xaa\xaf\x74\xc3\x15\x92\x70\xd2\x1e\x11\xee\x62\x15\xdf\xc1\x9d\xc3\x22\xe4\xbd\x96\xd7\xf5\x25\x8c\x9e\x79\xe3\x9a\xb0\x82\xbe\xd7\x05\xe0\x9f\x93\xfd\xf7\x07\xd2\xdd\x80\xef\xbd\x8c\xc7\xa1\xa8\xcb\x88\x46\x6c\x39\x87\x0e\x6d\x65\x10\x5b\x9a\xb3\x43\x6d\x6a\xf7\x00\xff\x2f\xde\x17\xdf\x14\x72\xea\x6e\x08\x3d\x60\xf6\xfd\xe0\x4c\x64\x72\xdd\x83\xc8\x8c\x5e\xaf\x46\x8c\xeb\xb2\xa6\xd9\xc9\xcc\xba\x94\x29\xdd\x9d\xc9\x96\x59\xd9\x25\x22\x24\xab\x79\x07\x03\xc5\xa5\xb6\xe8\xce\x39\x8a\xbd\x1b\x88\x5c\xde\x0f\x4a\x84\x2f\xc4\x0f\x68\x29\xa8\xad\x30\xbb\xbc\x5f\x18\x93\xdc\x1b\x1c\xed\xe3\x21\xfe\xf2\x96\x9c\x6e\x50\xc1\x35\x2f\x7f\x26\xac\x1e\xb5\x7d\xf2\x3e\xe9\x95\x75\x87\x6e\x59\x7f\x41\xd3\x40\xa7\xb3\xbb\x2c\x50\xdf\x9f\x89\x52\x68\x34\x71\x34\x52\x9c\xed\x0a\x39\x04\x95\xa1\x0b\x51\x33\x4e\x68\x79\x8d\x75\x59\x66\x91\xcd\xbd\x05\xfd\xab\x58\xd2\x54\x4e\xe6\x6c\xa0\xed\xf6\x27\x49\x92\xc1\x5f\x70\xa4\xc6\xcc\x11\x97\xe1\x8f\x4c\x9f\x12\xf8\x10\x9e\xd6\x12\x78\xbb\x88\xeb\x74\x22\x75\x93\xc9\x23\x43\x97\x78\xa1\xef\xac\xef\x99\xf7\xdb\xa9\x62\xf1\xcc\x6e\xf2\x77\xcd\x63\x64\xa2\x69\xf1\x46\x94\x37\x9d\xbd\x89\xb9\x98\x89\xe5\xdb\xcb\x16\xa6\xfd\x79\x29\x9e\x7a\x28\xb2\x48\xc5\xb0\x75\xe3\x30\xdd\x1e\x9c\x38\x64\x23\xce\xb4\xe0\x1a\x79\xd4\x56\x92\xae\x2d\xfc\x71\x6a\x49\x17\xaf\xfc\xfc\x5d\x19\x47\xea\x72\x8e\xa7\x6d\xd5\xc8\x23\x0e\xeb\x2a\xd5\x43\x17\x60\x10\xb6\xbf\x16\x45\x8b\x04\x5f\x0f\x35\x51\xba\x0d\x91\xaa\x21\x9f\x95\x85\x35\x2d\xaa\x88\x9a\x36\x55\x6a\xf8\x77\x75\x84\xcb\xfb\x9e\x6d\x3f\x39\xec\x06\x9e\x82\xf7\x5f\x19\x5d\xe9\x24\x79\x0c\x4f\x33\x11\x5b\x6b\x1e\xc9\xbd\xb6\x0a\x5f\x72\xc6\xef\xd9\x2e\x80\xe9\xfa\xd4\x2e\xf8\xb1\xdc\x6b\x6f\x65\x1d\x12\x26\xd8\x7e\x3c\x55\xb0\x88\xe0\xbf\xcb\xfa\x23\xbe\xd0\xbf\xcc\x7a\x17\x74\xff\x21\xa1\x69\x15\x9f\x77\xef\x48\xa0\xf8\x69\x48\x22\x52\xd0\x8f\x16\xcf\xb5\x53\x7c\xef\x50\x3e\x3d\x40\xbc\x71\x69\xcc\xb7\x51\xec\x37\x9b\x8d\xc8\xce\x86\x22\x4b\xf4\x14\x59\xf8\xa3\xb3\xfb\x3b\x00\x00\xff\xff\x92\x77\x35\x31\xef\x08\x00\x00")

func templatesTableGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTableGotemplate,
		"templates/table.gotemplate",
	)
}

func templatesTableGotemplate() (*asset, error) {
	bytes, err := templatesTableGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table.gotemplate", size: 2287, mode: os.FileMode(436), modTime: time.Unix(1545225104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/table.gotemplate": templatesTableGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"table.gotemplate": &bintree{templatesTableGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
