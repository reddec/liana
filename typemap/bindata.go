// Code generated by go-bindata.
// sources:
// typemap.yaml
// DO NOT EDIT!

package typemap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _typemapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x41\x6f\x9c\x30\x10\x85\xef\xfb\x2b\x46\x9c\x5a\x75\xc3\x02\x5e\xa2\x60\x29\x97\x6d\x14\x29\x97\x1c\x9a\xf4\xd2\xaa\x07\x03\x03\x58\xb5\x3d\xc8\x36\xdd\xd0\x5f\x5f\x01\x4e\xb5\xcb\x4a\x55\x0e\xed\xa1\x47\x3f\xde\x9b\xf9\x66\x06\x77\x14\x6d\x8b\x96\x6f\x36\x00\x51\xc4\x37\x00\x00\xd1\xd7\x6f\xe5\xe8\x31\xbc\x00\x84\x92\xc2\x71\x88\x0e\xc2\xe1\xf5\x3e\x0a\xaa\x1f\x7b\xe4\xe0\xbc\x95\xa6\x0d\x52\x43\x56\x0b\xcf\xa1\x9c\x8d\x41\xac\xd1\x55\x56\xf6\x5e\x92\xe1\xb0\x94\x00\x34\x15\xd5\x58\xc3\xd4\x06\x84\xb5\x62\x0c\x66\x7c\x11\xba\x57\xc8\x21\xfa\xcc\xea\xee\x4b\x56\xab\x4a\x1e\xc6\x32\x7b\xb4\xd5\xf1\xf6\x36\x9a\x29\xbd\xd4\xaf\x6c\xcf\x52\xe3\x9a\xf2\xd3\xfd\x47\xc6\x58\xf1\x07\xcc\x33\xa2\x57\x3f\x4c\x65\xe1\x28\x7d\x07\x34\x7f\x12\x0a\x8c\x30\xe4\xb0\x22\x53\x3b\x10\xa6\x9e\x2d\x3f\xc9\x60\x74\x41\x9b\x25\xe9\xcd\x55\x9a\x5c\xa5\xf9\x73\x96\xf2\xbc\xe0\x29\x8b\x8b\x34\x2f\x58\x91\xed\xd9\x87\xe4\x86\x27\xc9\x12\xba\x1b\xac\x98\x1b\xbf\x15\xaf\x0e\x81\x13\x3e\x37\x34\x8d\x7c\x41\x07\xef\xb4\xdb\x82\xdb\x82\xde\x42\xf7\xfe\x12\x8a\xb9\x65\x61\x2d\xf5\xdf\xdb\x58\x9a\x5d\x3b\x58\x6c\x87\x9d\x19\x94\x8a\x7f\xb0\xb0\xc3\xa7\xb9\xf7\x6a\x8b\x4f\xa7\x40\x17\x8c\x0f\xc6\xaf\xfc\x0f\xc6\x63\x8b\xf6\x2c\x20\x4f\xb4\x7b\x45\x62\x9d\x99\xb5\xb3\x84\x19\x74\x19\x02\x07\x22\xb5\xf2\x4f\xd2\x99\xbd\x24\x52\x28\xcc\x7f\xf8\x27\xcc\x57\x91\xbe\x1b\xca\xb8\x22\xbd\x73\x1d\xf5\xae\x9f\xb8\x76\x35\x56\x52\x0b\x15\x6e\x73\xb7\xbc\xd6\x83\x05\xf9\xad\x83\x85\x9a\x61\xbd\xcb\x64\x43\x0f\x9e\x20\xcb\xf7\xe0\x46\x5d\x92\x72\x20\x1a\x8f\x16\x9a\xe9\x28\xd2\xb4\xd0\x93\x34\xfe\x62\xba\x34\x63\xf1\x3e\xbf\x5e\x3a\x3f\x0e\x4a\xfd\x1d\xc2\xdf\x7b\xfe\x07\xa8\xbf\x02\x00\x00\xff\xff\x08\x78\xc2\xdb\xe2\x04\x00\x00")

func typemapYamlBytes() ([]byte, error) {
	return bindataRead(
		_typemapYaml,
		"typemap.yaml",
	)
}

func typemapYaml() (*asset, error) {
	bytes, err := typemapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "typemap.yaml", size: 1250, mode: os.FileMode(436), modTime: time.Unix(1539688277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"typemap.yaml": typemapYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"typemap.yaml": &bintree{typemapYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
